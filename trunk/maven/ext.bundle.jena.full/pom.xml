<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.appdapter</groupId>
		<artifactId>org.appdapter.modules.core</artifactId>
		<version>1.2.4-SNAPSHOT</version>
		<relativePath>../org.appdapter.modules.core/pom.xml</relativePath>
	</parent>

	<properties>
		<jena.version>2.13.0</jena.version>
		
		<!--jena-tdb.version>0.10.1</jena-tdb.version>
		<jena-iri.version>0.9.6</jena-iri.version>
		<jena-fuseki.version>0.2.7</jena-fuseki.version-->
		<!--	LogicMoo was experimenting with plugging Sesame in here as well, but we decided it is too bulky and 
				deserves its own wrappers if we are going to use it.
		<sesame.version>2.7.4</sesame.version>
		-->
	</properties>

	<artifactId>ext.bundle.jena_all_2_13_0</artifactId>
	<packaging>bundle</packaging>
	<name>${project.artifactId} - OSGi - Jena wrapper</name>
	<description>Jena ${jena.version}, ARQ</description>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.osgi.common</artifactId>
            <version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.apache_httpclient</artifactId>
            <version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.xml.xerces</artifactId>
            <version>${project.version}</version>
		</dependency>			

		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-osgi</artifactId>
            <version>2.13.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient-osgi</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpcore-osgi</artifactId>
				</exclusion>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
			 <exclusion>
			  <groupId>org.slf4j</groupId>
			  <artifactId>jcl-over-slf4j</artifactId>
			 </exclusion>
			</exclusions>
		</dependency>		
	


		<!-- sdb is still used in org/appdapter/bind/sql/h2/DatabaseConnector.java -->
		<dependency>	
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-sdb</artifactId>
			<version>1.5.2</version>

			<exclusions>
				<exclusion>
					<groupId>org.apache.jena</groupId>
					<artifactId>jena-arq</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.jena</groupId>
					<artifactId>jena-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		
		
<!--
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>com.springsource.com.ibm.icu</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.servicemix.bundles</groupId>
			<artifactId>org.apache.servicemix.bundles.lucene</artifactId>
			<scope>runtime</scope>
		</dependency>
		-->
		<!-- TODO:  Record which Jena features actually depend on these Mail + Activation APIs -->
		<!--
		<dependency>
			<groupId>org.apache.servicemix.bundles</groupId>
			<artifactId>org.apache.servicemix.bundles.javax.mail</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.servicemix.specs</groupId>
			<artifactId>org.apache.servicemix.specs.activation-api-1.1</artifactId>
			<scope>runtime</scope>
		</dependency>		
		-->
		<!-- If we don't properly exclude all of Jena's attempts to propagate (non-OSGi friendly) Log4J jars, we see 
		runtime messages like:
						
     [java] Auto-properties install: file:/E:/maven_repo/log4j/log4j/1.2.16/log4j-1.2.16.jar (org.osgi.framework.BundleException: Duplicate import: com.sun.jdmk.comm)
     [java] Auto-properties start: file:/E:/maven_repo/log4j/log4j/1.2.16/log4j-1.2.16.jar (org.osgi.framework.BundleException: Duplicate im[System.out] Trace: 
		ext.osgi.common.ExtOSGiCommonBundleActivator.start(ctx=org.apache.felix.framework.BundleContextImpl@32955cd5port: com.sun.jdmk.comm)				

		-->
		
							
	</dependencies>

			
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<extensions>true</extensions>
				<configuration>
					<instructions>

						<Import-Package>
						<!-- Using httpclient-osgi-4.3.1.jar  avoids problems with 	org.apache.http.impl.*, which
							we used to exclude here, but which is needed by Jena SOH-upload				-->
							*
						</Import-Package>
						<!-- DynamicImport-Package is a horrid workaround for Class.forName() used in AssemberHelp.
							We have successfully been using Fragment-Host to inject buildable classes from JFlux
							and other artifact locations.  	

							Newer Jena riot-RDFDataMgr may allow for some cleaner code on the appdapter side.			
							
							Cogchar TODO:  Use Fragment-Host to allow Assembler to process injected classes from Cogchar,
							then remove at least that part of the DynamicImport-Package.  
							
							A similar concern applies in o.a.b.core.
							
				com.hp.hpl.jena.assembler.*
 Unable to resolve bundle revision org.appdapter.org.appdapter.bundle.core [2.0] because it is exposed to package 
'com.hp.hpl.jena.assembler.assemblers' from bundle revisions org.appdapter.ext.bundle.jena_all_2_13_0 [25.0] 
and org.apache.jena.osgi [13.0] via two dependency chains.							
							 
						-->
						<Export-Package>arq.*, com.hp.hpl.jena.sdb.*</Export-Package>
						<Private-Package>riotcmd</Private-Package>
						<DynamicImport-Package>org.appdapter.*,org.cogchar.*</DynamicImport-Package>
	
					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
<!--
/*
 *  Copyright 2013 by The Appdapter Project (www.appdapter.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
-->


<!--
		These "sources" and "javadocs" deps appear to possibly be complicating the resolution of the
		httpclient/httpcore imports.  We can come back to this.  However, these are so bulky in the
		pom.xml - can we file them neatly away somewhere else without another ext-bundle in Appdapter?
		
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-arq</artifactId>
			<version>${jena.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-core</artifactId>
			<version>${jena.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-tdb</artifactId>
			<version>${jena-tdb.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>			
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-sdb</artifactId>
			<version>${jena-sdb.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-iri</artifactId>
			<version>${jena-iri.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>
-->       

