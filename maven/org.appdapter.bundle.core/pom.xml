
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.appdapter</groupId>
		<artifactId>org.appdapter.modules.core</artifactId>
		<version>1.1.3-SNAPSHOT</version>
		<relativePath>../org.appdapter.modules.core/pom.xml</relativePath>
	</parent>	

	<artifactId>org.appdapter.bundle.core</artifactId>
	<packaging>bundle</packaging>
	<name>${project.artifactId} - OSGi - core + registry</name>
	<description>Primary Appdapter OSGi Bundle, "depend on me!", has no dependencies on a particular 
			OSGi framework implementation, no SLF4J concrete binding, and no builtin shell.
			Includes the contents of both the "core" and "registry" bundes from the "lib" tier.
	</description>	

	<dependencies>
		<dependency>
           <groupId>${project.groupId}</groupId>
           <artifactId>org.appdapter.lib.core</artifactId>
           <version>${project.version}</version>
		   <!-- We use "provided" scope for the code we are exporting, because we don't want our dependency on the
				lib to propagate out to users of this bundle.
			-->
           <scope>provided</scope>
           <exclusions>
               <exclusion>
                   <artifactId>xmlbeans</artifactId>
                   <groupId>org.apache.xmlbeans</groupId>
               </exclusion>
           </exclusions>
       </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>org.appdapter.lib.registry</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>org.appdapter.lib.remote</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ext.bundle.osgi.common</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ext.bundle.openconverters</artifactId>
            <version>${project.version}</version>
        </dependency>

		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.core</artifactId>
			<version>4.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.compendium</artifactId>
			<version>4.2.0</version>
		</dependency>
			
		<dependency>
			<artifactId>h2</artifactId>
			<groupId>com.h2database</groupId>
			<type>jar</type>
			<version>1.3.157</version>
			<scope>runtime</scope>			
		</dependency>
		<dependency>
			<artifactId>slf4j-api</artifactId>
			<groupId>org.slf4j</groupId>
			<type>jar</type>
			<version>1.7.5</version>
            <scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>2.10.2</version>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-reflect</artifactId>
			<version>2.10.2</version>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-compiler</artifactId>
			<version>2.10.2</version>
		</dependency>
		<dependency>
			<artifactId>ext.bundle.jena_all_2_10_1</artifactId>
			<groupId>${project.groupId}</groupId>
			<!-- TODO:  Review and make explicit - What are all the impacts of "type = jar"? 
				Stu 2013-10-23  let's try it without this
			<type>jar</type>
			-->
			<version>${project.version}</version>
			<!-- This is currently a "runtime" depdendency so that the code we export from o.c.lib.core 
					can be wired properly at runtime, but at compile time users can *choose* whether
					to bring the ext.Jena bundle into their compile scope.  In principle, users could
					choose to use a different compatible OSGi-bundling of Jena at runtime or compile time.
					Is this flexibility worth the fact that our consumers need to make a separate 
					dependency if they want to code against Jena directly?   Debatable.
			-->
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.math.jscience_50SNAP</artifactId>
			<!-- Stu 2013-10-23  let's try it without this
			<type>jar</type>
			-->
			<!-- This external component bundle-snapshot version is now fixed -->
			<version>1.0.9</version>
			<!-- See explanation above under Jena dep about why this is "runtime" -->
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.xml.dom4j_161</artifactId>
			<version>${project.version}</version>
			<!-- See explanation above under Jena dep about why this is "runtime" -->
			<scope>runtime</scope>
		</dependency>
        <!-- 
		TODO:  Let's move the POI-dependent features into their own bundle oriented towards data import/export.
		Included ow2 bundle to export apache.commons.logging.  
            Needed by org.apache.poi -->
        <dependency>
            <groupId>org.ow2.bundles</groupId>
            <artifactId>ow2-bundles-externals-commons-logging</artifactId>
            <version>1.0.33</version>
            <scope>runtime</scope>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging-api</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
            </exclusions>
        </dependency>
		<!--  for the GUI -->
        <!--dependency>
            <groupId>com.jidesoft</groupId>
            <artifactId>jide-oss</artifactId>
            <version>3.5.5</version>
        </dependency-->

        <!-- Included servicemix bundle to export apache.commons.codec.  
            Needed by org.apache.poi 
			...
			but this sorta conflicts with direct commons-codec dep required by Jena ARQ,
			which uses a different version numbering stream, numerically *higher* than
			this one, so let's try taking this one out.
		-->
		<!-- 
        <dependency>
            <groupId>org.apache.servicemix.bundles</groupId>
            <artifactId>org.apache.servicemix.bundles.commons-codec</artifactId>
            <version>1.3_3</version>
            <scope>runtime</scope>
        </dependency>
		--> 
        <dependency>
          <groupId>org.openl.rules</groupId>
          <artifactId>org.openl.lib.poi.dev</artifactId>
          <version>5.9.4.1</version>
          <scope>runtime</scope>
         <exclusions>
            <exclusion>
               <artifactId>xmlbeans</artifactId>
               <groupId>org.apache.xmlbeans</groupId>
            </exclusion>
         </exclusions>
      </dependency>
    <!-- excluded.. now we add our own -->
         <dependency>
            <groupId>org.apache.xmlbeans</groupId>
            <artifactId>xmlbeans</artifactId>
            <version>2.5.0</version>
        </dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.3.7</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<!-- org.gjt.*;resolution:='optional', -->
                        <!--Import-Package>sun.*;resolution:='optional', com.sun.*;resolution:='optional', org.apache.*;resolution:='optional', org.h2, apple.laf.*;resolution:='optional', com.apple.laf.*;resolution:='optional', *;resolution:='optional'</Import-Package-->
                        <Import-Package>*;resolution:='optional'</Import-Package>
						<Bundle-Activator>org.appdapter.osgi.core.AppdapterCoreBundleActivator</Bundle-Activator>
                        <Export-Package>*;-split-package:=merge-first</Export-Package>
						<!--Export-Package>org.appdapter.*, org.apache.xmlbeans.*,com.hp.hpl.jena.graph.query</Export-Package-->
						<!-- Horrid workaround for Class.forName() used in DynamicCachingComponentAssembler, could widen it to "*",
							but better to get Jena code fixed to allow classloader setup.
						-->
						<DynamicImport-Package>org.cogchar.*</DynamicImport-Package>                        						
						<!--
						arq.*,com.hp.hpl.jena.*,org.openjena.*,etc.*,vocabularies.*						
						<Private-Package>org.xmldb.*,riotcmd.*</Private-Package>
                        <Private-Package>org.apache.poi.*, com.jidesoft.*, org.openxmlformats.*, schemaorg_apache_xmlbeans.*, schemasMicrosoftComOfficeExcel.*, schemasMicrosoftComOfficeOffice.*, schemasMicrosoftComVml.*,org.joda.*</Private-Package>
                        -->						

					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
<!--
/*
 *  Copyright 2011 by The Appdapter Project (www.appdapter.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
-->