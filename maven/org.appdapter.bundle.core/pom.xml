
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.appdapter</groupId>
		<artifactId>org.appdapter.modules.core</artifactId>
		<version>1.1.3-SNAPSHOT</version>
		<relativePath>../org.appdapter.modules.core/pom.xml</relativePath>
	</parent>	

	<artifactId>org.appdapter.bundle.core</artifactId>
	<packaging>bundle</packaging>
	<name>${project.artifactId} - OSGi - core + registry</name>
	<description>Primary Appdapter OSGi Bundle, "depend on me!", has no dependencies on a particular 
			OSGi framework implementation, no SLF4J concrete binding, and no builtin shell.
			Includes the contents of both the "core" and "registry" bundes from the "lib" tier.
	</description>	

	<dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ext.bundle.osgi.common</artifactId>
            <version>${project.version}</version>
        </dependency>		
		<dependency>
           <groupId>${project.groupId}</groupId>
           <artifactId>org.appdapter.lib.core</artifactId>
           <version>${project.version}</version>
		   <!-- We use "provided" scope for the code we are exporting, because we don't want our dependency on the
				lib to propagate out to users of this bundle.
			-->
           <scope>provided</scope>
       </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>org.appdapter.lib.bind.jena</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>	   
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>org.appdapter.lib.registry</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
			<!-- We exclude all the packages of this bundle from Export-Package below, so they don't get 
					exported in two different places.
			-->
            <groupId>${project.groupId}</groupId>
            <artifactId>org.appdapter.bundle.debug</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
			<!-- We exclude all the packages of this bundle from Export-Package below, so they don't get 
					exported in two different places.
			-->
            <groupId>${project.groupId}</groupId>
            <artifactId>org.appdapter.bundle.fileconv</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>xml-apis</artifactId>
                    <groupId>xml-apis</groupId>
                </exclusion>
            </exclusions>
        </dependency>			
        <!-- removed until it is complete -->
        <!--dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>org.appdapter.lib.remote</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency-->

		<dependency>
			<artifactId>ext.bundle.jena_all_2_10_1</artifactId>
			<groupId>${project.groupId}</groupId>
			<version>${project.version}</version>
			<!-- This is currently a "runtime" depdendency so that the code we export from o.c.lib.core 
					can be wired properly at runtime, but at compile time users can *choose* whether
					to bring the ext.Jena bundle into their compile scope.  In principle, users could
					choose to use a different compatible OSGi-bundling of Jena at runtime or compile time.
					Is this flexibility worth the fact that our consumers need to make a separate 
					dependency if they want to code against Jena directly?   Debatable.

                    Since bundle.core should contain mostly only an activator.. like any wrapper all should be  is <scope>runtime</scope>.. instead of compile time?
			-->
			<scope>runtime</scope>
		</dependency>
         <!-- jena (used to? still?) provides this transitively. is it still needed? -->	
		<!--dependency>
			<artifactId>h2</artifactId>
			<groupId>com.h2database</groupId>
			<type>jar</type>
			<version>1.3.157</version>
			<scope>runtime</scope>			
		</dependency-->		


        <dependency>
			<!-- Stu asks:  What features in o.a.b.core require this dep? 
            
             Douglas:
             o.a.lib.remote needs for the sparql client I belived
             It is proabably true that any ext.*.* of ours that we bundle here
             we will need to re-include its reqirements at least at the runtime level
             But not have to re-export it's packages in these exports (that is take classloader responsiibity).
             Since we'd want downstreams to be able to take classloader reponsibility (First before a differnt activator (of ours) takes ownership (Of course this bundle still may take it when no override happens )).               
             Then if they dont take on the responsibility, still be able to supply the ones we picked out that we know work even with class isolation.
             
             Another real goal (only slightly related) is to ensure we get them using and owning <artifactId>ext.bundle.apache_httpclient</artifactId>
             
             IF
                they (they=startable bundle) want this use bundle 
                AND want/need (jena OR dom4j OR httpclient)
             THEN 
                they will themselves will depend directly on our ext.b.*s
             ELSE  
                  give them a wiring error that "there are more than one way to resolve org.apache.client"
                  [ if they have a valid reason for not using ours.. let them isolate theirs, not ours]
             
             We do this visibly with Jena (not on purpose for the IF/THEN/ELSE)

             When we didn't want this, then we need to make sure we give them jena only at compile time and 
			we'd need to hide it from exports, but not runtime correct?  
            
                        
            -->
            <groupId>${project.groupId}</groupId>
            <artifactId>ext.bundle.apache_httpclient</artifactId>
            <version>${project.version}</version>
        </dependency>	
			
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.math.jscience_50SNAP</artifactId>
			<!-- This external component bundle-snapshot version is now fixed -->
			<version>1.0.9</version>
			<!-- See explanation above under Jena dep about why this is "runtime" -->
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.xml.dom4j_161</artifactId>
			<version>${project.version}</version>
			<!-- See explanation above under Jena dep about why this is "runtime" -->
			<scope>runtime</scope>
		</dependency>
       		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.5</version>
			<scope>runtime</scope>
			<exclusions>
				<!-- This embedded Log4J version is not OSGi friendly -->				
				<exclusion>
					<artifactId>log4j</artifactId>
					<groupId>log4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.3.7</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<!-- Why is this 'optional' resolution of our deps so broadly necessary? 
								Which deps are we having trouble resolving.
						-->
                        <Import-Package>*;resolution:='optional'</Import-Package>
						<Bundle-Activator>org.appdapter.osgi.core.AppdapterCoreBundleActivator</Bundle-Activator>
						<!-- This full wildcard is a bit too broad, since it allows in some ext.bundle activators,
						which is a good reason to change the package on those.
						-->
						<Export-Package>
							<!-- Need to exclude all the packages from o.a.bundle.debug, or they will get re-exported.
								TODO:  Rename these packages so they are easier to exclude en-masse.
							-->
							!org.appdapter.bind.log4j,
							!org.appdapter.bundle.debug,
							!org.appdapter.core.convert,
							!org.appdapter.core.debug,
							!org.appdapter.core.jvm,
							!org.appdapter.core.log,
							<!-- Exclude these packages from o.a.bundle.fileconv -->
							!org.appdapter.bind.csv.datmat,
							!org.appdapter.bundle.fileconv,
							!org.appdapter.fileconv,
							<!-- NOW, we can export the rest of appdapter-core 
							(contents of lib.core, lib.registry, lib.bind.{math,jena}	-->
							org.appdapter.*
						</Export-Package>

						<!--Export-Package>org.appdapter.*, org.apache.xmlbeans.*,com.hp.hpl.jena.graph.query</Export-Package-->
						<!-- Horrid workaround for Class.forName() used in DynamicCachingComponentAssembler, could widen it to "*",
							but better to get Jena code fixed to allow classloader setup.
						-->
						<DynamicImport-Package>org.cogchar.*</DynamicImport-Package>                        						
						<!--
						arq.*,com.hp.hpl.jena.*,org.openjena.*,etc.*,vocabularies.*						
						<Private-Package>org.xmldb.*,riotcmd.*</Private-Package>
                        <Private-Package>org.apache.poi.*, com.jidesoft.*, org.openxmlformats.*, schemaorg_apache_xmlbeans.*, schemasMicrosoftComOfficeExcel.*, schemasMicrosoftComOfficeOffice.*, schemasMicrosoftComVml.*,org.joda.*</Private-Package>
                        -->						

					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
<!--
/*
 *  Copyright 2011 by The Appdapter Project (www.appdapter.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
-->