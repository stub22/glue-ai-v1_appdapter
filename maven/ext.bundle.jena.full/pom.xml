<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.appdapter</groupId>
		<artifactId>org.appdapter.modules.core</artifactId>
		<version>1.2.0</version>
		<relativePath>../org.appdapter.modules.core/pom.xml</relativePath>
	</parent>

	<properties>
		<jena.version>2.10.1</jena.version>
		<jena-sdb.version>1.3.6</jena-sdb.version>
		<jena-tdb.version>0.10.1</jena-tdb.version>
		<jena-iri.version>0.9.6</jena-iri.version>
		<jena-fuseki.version>0.2.7</jena-fuseki.version>
		<!--	LogicMoo was experimenting with plugging Sesame in here as well, but we decided it is too bulky and 
				deserves its own wrappers if we are going to use it.
		<sesame.version>2.7.4</sesame.version>
		-->
	</properties>

	<!-- Artifact ID updated on 2013-07-17 from ext.bundle.jena_all_264 to what you see on next line (v 2.10.1)
			Next expected update to our glue.ai Jena dependency (and other key deps) is expected 2014-June.
	-->
	<artifactId>ext.bundle.jena_all_2_10_1</artifactId>
	<packaging>bundle</packaging>
	<name>${project.artifactId} - OSGi - Jena wrapper</name>
	<description>Jena ${jena.version}, ARQ + SDB ${jena-sdb.version}</description>

	<repositories>
		<repository>
			<!-- Which deps do we still need this for? -->
			<id>apache-repo-snapshots</id>
			<url>https://repository.apache.org/content/repositories/snapshots/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
	
	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.osgi.common</artifactId>
            <version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.apache_httpclient</artifactId>
            <version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.xml.xerces</artifactId>
            <version>${project.version}</version>
		</dependency>			
		
		<!-- Jena "sources" and "javadocs" deps commented out and moved to bottom of file. See comments there -->
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>apache-jena-libs</artifactId>
			<type>pom</type>
			<version>${jena.version}</version>
			<!-- We use "provided" scope because we are exporting the contents of these libraries, and we don't want our
				bundle consumers to see and be confused by these additional copies of the classes, as transitive
				dependencies.  "provided" prevents that from happening.
			-->
			<scope>provided</scope>
			<exclusions>
				<!-- We want to prevent Jena's bundled dependencies from propagating and interfering with our 
					other glue.ai OSGi 	compliant deps.
				-->
				<exclusion>
					<artifactId>lucene-core</artifactId>
					<groupId>org.apache.lucene</groupId>
				</exclusion>
				<exclusion>
					<artifactId>stax-api</artifactId>
					<groupId>stax</groupId>
				</exclusion>
				<exclusion>
					<artifactId>wstx-asl</artifactId>
					<groupId>org.codehaus.woodstox</groupId>
				</exclusion>
				<exclusion>
					<artifactId>log4j</artifactId>
					<groupId>log4j</groupId>
				</exclusion>
				<exclusion>
					<artifactId>icu4j</artifactId>
					<groupId>com.ibm.icu</groupId>
				</exclusion>
				<exclusion>
					<artifactId>xercesImpl</artifactId>
					<groupId>xerces</groupId>
				</exclusion>
				<exclusion>
					<artifactId>slf4j-log4j12</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
                <exclusion>
                     <artifactId>slf4j-api</artifactId>
                     <groupId>org.slf4j</groupId>
                 </exclusion>
                <exclusion>
                     <artifactId>jcl-over-slf4j</artifactId>
                     <groupId>org.slf4j</groupId>
                 </exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-core</artifactId>
			<version>${jena.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<artifactId>log4j</artifactId>
					<groupId>log4j</groupId>
				</exclusion>
              <exclusion>
                  <artifactId>slf4j-log4j12</artifactId>
                  <groupId>org.slf4j</groupId>
              </exclusion>
              <exclusion>
                   <artifactId>slf4j-api</artifactId>
                   <groupId>org.slf4j</groupId>
               </exclusion>
              <exclusion>
                   <artifactId>jcl-over-slf4j</artifactId>
                   <groupId>org.slf4j</groupId>
               </exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-tdb</artifactId>
			<version>${jena-tdb.version}</version>
			<scope>provided</scope>
			<exclusions>
				<!-- We want the OSGi-friendly version -->
				<exclusion>
					<artifactId>httpclient</artifactId>
					<groupId>org.apache.httpcomponents</groupId>
				</exclusion>
			 <exclusion>
			  <artifactId>log4j</artifactId>
			  <groupId>log4j</groupId>
			 </exclusion>
                <exclusion>
                    <artifactId>slf4j-log4j12</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
                <exclusion>
                     <artifactId>slf4j-api</artifactId>
                     <groupId>org.slf4j</groupId>
                 </exclusion>
                <exclusion>
                     <artifactId>jcl-over-slf4j</artifactId>
                     <groupId>org.slf4j</groupId>
                 </exclusion>

			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-iri</artifactId>
			<version>${jena-iri.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<artifactId>log4j</artifactId>
					<groupId>log4j</groupId>
				</exclusion>
              <exclusion>
                  <artifactId>slf4j-log4j12</artifactId>
                  <groupId>org.slf4j</groupId>
              </exclusion>
              <exclusion>
                   <artifactId>slf4j-api</artifactId>
                   <groupId>org.slf4j</groupId>
               </exclusion>
              <exclusion>
                   <artifactId>jcl-over-slf4j</artifactId>
                   <groupId>org.slf4j</groupId>
               </exclusion>
			</exclusions>
		</dependency>


		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-sdb</artifactId>
			<type>jar</type>
			<version>${jena-sdb.version}</version>
			<scope>provided</scope>
			<exclusions>
				<!-- Exclude bindings that we provide elsewhere in more OSGi-friendly form -->
				<exclusion>
					<artifactId>lucene-core</artifactId>
					<groupId>org.apache.lucene</groupId>
				</exclusion>
				<exclusion>
					<artifactId>stax-api</artifactId>
					<groupId>stax</groupId>
				</exclusion>
				<exclusion>
					<artifactId>wstx-asl</artifactId>
					<groupId>org.codehaus.woodstox</groupId>
				</exclusion>
				<exclusion>
					<artifactId>log4j</artifactId>
					<groupId>log4j</groupId>
				</exclusion>
				<exclusion>
					<artifactId>icu4j</artifactId>
					<groupId>com.ibm.icu</groupId>
				</exclusion>
				<exclusion>
					<artifactId>xercesImpl</artifactId>
					<groupId>xerces</groupId>
				</exclusion>
				<exclusion>
					<artifactId>slf4j-log4j12</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
                <exclusion>
                     <artifactId>slf4j-api</artifactId>
                     <groupId>org.slf4j</groupId>
                 </exclusion>
                <exclusion>
                     <artifactId>jcl-over-slf4j</artifactId>
                     <groupId>org.slf4j</groupId>
                 </exclusion>

			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>com.springsource.com.ibm.icu</artifactId>
			<version>3.4.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.servicemix.bundles</groupId>
			<artifactId>org.apache.servicemix.bundles.lucene</artifactId>
			<version>3.0.3_2</version>
			<scope>runtime</scope>
		</dependency>

		<!-- TODO:  Record which Jena features actually depend on these Mail + Activation APIs -->
		<dependency>
			<groupId>org.apache.servicemix.bundles</groupId>
			<artifactId>org.apache.servicemix.bundles.javax.mail</artifactId>
			<version>1.4.1_4</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.servicemix.specs</groupId>
			<artifactId>org.apache.servicemix.specs.activation-api-1.1</artifactId>
			<version>1.8.0</version>
			<scope>runtime</scope>
		</dependency>		
		
		<!-- If we don't properly exclude all of Jena's attempts to propagate (non-OSGi friendly) Log4J jars, we see 
		runtime messages like:
						
     [java] Auto-properties install: file:/E:/maven_repo/log4j/log4j/1.2.16/log4j-1.2.16.jar (org.osgi.framework.BundleException: Duplicate import: com.sun.jdmk.comm)
     [java] Auto-properties start: file:/E:/maven_repo/log4j/log4j/1.2.16/log4j-1.2.16.jar (org.osgi.framework.BundleException: Duplicate im[System.out] Trace: 
		ext.osgi.common.ExtOSGiCommonBundleActivator.start(ctx=org.apache.felix.framework.BundleContextImpl@32955cd5port: com.sun.jdmk.comm)				

		-->
		
		<dependency>
			<!-- Local SLF4J-Log4J binding used during bundle dev testing only -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.5</version>
			<!-- Can be changed to "runtime" for a solo-launch test, but do not commit other than at "test"
			- we do not want this binding to propagate from here. -->
			<scope>test</scope>
			<exclusions>
				<!-- We exclude the normally embedded Log4J version, because it is not OSGi friendly.
					We instead use the bundled version supplied by SpringSource, via ext.bundle.osgi.common.
				-->			
				<exclusion>
					<artifactId>log4j</artifactId>
					<groupId>log4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>							
	</dependencies>

			
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.3.7</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>

						<Import-Package>
						<!-- Prevent direct wiring to this pkg, which is private in our httpclient-osgi-4.3.jar -->
							!org.apache.http.impl.*,
						<!--
							org.apache.xerces.*;resolution:='optional',
						-->
							*
						</Import-Package>
						<!-- DynamicImport-Package is a horrid workaround for Class.forName() used in AssemberHelp.
							We have successfully been using Fragment-Host to inject buildable classes from JFlux
							and other artifact locations.  	

							Newer Jena riot-RDFDataMgr may allow for some cleaner code on the appdapter side.			
							
							Cogchar TODO:  Use Fragment-Host to allow Assembler to process injected classes from Cogchar,
							then remove at least that part of the DynamicImport-Package.  
							
							A similar concern applies in o.a.b.core.
						-->
						<DynamicImport-Package>org.appdapter.*,org.cogchar.*</DynamicImport-Package>
						<Bundle-Activator>ext.bundle.jena.full.Activator</Bundle-Activator>
	
						<Export-Package>
							ext.bundle.jena.full,
							arq.*,
							tdb.*;-split-package:=merge-first,
							com.hp.hpl.jena.*;-split-package:=merge-first,
							etc.*;-split-package:=merge-first,
							org.openjena.*;-split-package:=merge-first,
							jena.*;-split-package:=merge-first, 
							org.apache.jena.*;-split-package:=merge-first
						</Export-Package>
						<Private-Package>riotcmd</Private-Package>
					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
<!--
/*
 *  Copyright 2013 by The Appdapter Project (www.appdapter.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
-->


<!--
		These "sources" and "javadocs" deps appear to possibly be complicating the resolution of the
		httpclient/httpcore imports.  We can come back to this.  However, these are so bulky in the
		pom.xml - can we file them neatly away somewhere else without another ext-bundle in Appdapter?
		
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-arq</artifactId>
			<version>${jena.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-core</artifactId>
			<version>${jena.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-tdb</artifactId>
			<version>${jena-tdb.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>			
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-sdb</artifactId>
			<version>${jena-sdb.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-iri</artifactId>
			<version>${jena-iri.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>
-->       

