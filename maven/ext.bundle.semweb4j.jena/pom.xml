<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.appdapter</groupId>
		<artifactId>org.appdapter.modules.core</artifactId>
		<version>1.2.4-SNAPSHOT</version>
		<relativePath>../org.appdapter.modules.core/pom.xml</relativePath>
	</parent>	
    <artifactId>ext.bundle.semweb4j.jena</artifactId>
    <packaging>bundle</packaging>

	<name>${project.artifactId} - OSGi wrapper for SemWeb4J with Jena binding</name>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <version>4.3.0</version>
            <scope>provided</scope>
        </dependency>

		<dependency>
			<groupId>org.appdapter</groupId>
			<artifactId>ext.bundle.jena_all_2_13_0</artifactId>
			<version>${project.version}</version>
		</dependency>	

						
		<dependency>
            <!-- Proper bundle used by ontoware RDF2Go stuff, which is not otherwise propagated.
				We do *not* want to re-export this bundle.
			-->
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
			<!-- Since we want this bundle-dep to propagate, we don't want "provided"
            <scope>provided</scope>
			-->
        </dependency>
        <dependency>
            <groupId>org.semweb4j</groupId>
            <artifactId>rdf2go.api</artifactId>
            <version>${org.semweb4j.version}</version>
			<!-- Nope, we want this dep to propagate, so we want scope=compile, which is the default.
             <scope>provided</scope>
			 -->
        </dependency>
        <dependency>
            <groupId>org.semweb4j</groupId>
            <artifactId>rdfreactor.runtime</artifactId>
            <version>${org.semweb4j.version}</version>
			<!-- We are re-exporting this jar contents, so "provided" is correct scope -->
             <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.semweb4j</groupId>
            <!-- does not have an OSGi manifest.  provides org.ontoware.rdf2go.impl.StaticBinding, which is in a 
            package that is also defined by rdf2go.api  which does have an OSGi manifest.   Probably the .impl
            bundle should be treated as a fragment, injected into the .api Fragment-host.
            -->
            <artifactId>rdf2go.impl.jena</artifactId>
            <version>${org.semweb4j.version}</version>
			<!-- We are re-exporting this jar contents, so "provided" is correct scope -->
             <scope>provided</scope>
            <!--  Still needed?
            <exclusions>
                    <exclusion>
                            <artifactId>httpclient</artifactId>
                            <groupId>org.apache.httpcomponents</groupId>
                    </exclusion>
            </exclusions>
            -->
            <exclusions>
				<!-- We do not want to propagate a direct dependence on these jena deps. -->
                <exclusion>
                    <groupId>org.apache.jena</groupId>
                    <artifactId>jena-arq</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.jena</groupId>
                    <artifactId>jena-core</artifactId>
                </exclusion>
                <exclusion>
					<!-- We are not using this feature currently, and it drags in a lot of other deps -->
                    <groupId>com.github.jsonld-java</groupId>
                    <artifactId>jsonld-java-jena</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
		<!--
        <dependency>
            <groupId>com.github.jsonld-java</groupId>
            <artifactId>jsonld-java-jena</artifactId>
            <version>0.4.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.3.3</version>
            <scope>provided</scope>
        </dependency>
		-->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>2.3.7</version>
                <extensions>true</extensions>
                <configuration>
                    <instructions>
                        <Bundle-Activator>ext.bundle.semweb4j.jena.Activator</Bundle-Activator>
						<Import-Package>!com.github.jsonldjava.*,*</Import-Package>
                        <Export-Package>
							<!-- Notes:  1) We don't want to re-export the packages from rdf2go.api.
							2) The impl package is somewhat tricky, as this is the special "binding" pkg, 
							but also contains AbstractModelFactory.class.  That is why we get:

Bundle org.cogchar:ext.bundle.ontoware:bundle:1.1.3-SNAPSHOT : Split package org/ontoware/rdf2go/impl
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
							-->
							org.ontoware.rdf2go.impl.*,  
							org.ontoware.rdfreactor.*
							<!--
							org.ontoware.*, rdf2go.*, rdfreactor.runtime, com.github.jsonldjava.*, com.fasterxml.jackson.*, org.apache.commons.io.*
							-->
						</Export-Package>						
                    </instructions>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>build-for-felix</id>
            <dependencies>
                <dependency>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>org.apache.felix.main</artifactId>
                    <version>4.0.3</version>
                    <scope>provided</scope>
                </dependency>
                <!-- To include a shell:
                <dependency>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>org.apache.felix.gogo.shell</artifactId>
                    <version>0.10.0</version>
                </dependency>
                -->
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.7</version>
                        <executions>
                            <execution>
                                <id>compile</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <pathconvert property="plugins.jars" pathsep="${path.separator}">
                                            <path refid="maven.runtime.classpath"/>
                                            <map from="${project.build.directory}${file.separator}classes" to=""/>
                                        </pathconvert>
                                        <pathconvert pathsep=" " property="bundles">
                                            <path path="${plugins.jars}"/>
                                            <mapper>
                                                <chainedmapper>
                                                    <flattenmapper/>
                                                    <globmapper from="*" to="file:modules/*" casesensitive="no"/>
                                                </chainedmapper>
                                            </mapper>
                                        </pathconvert>
                                        <propertyfile file="${project.build.directory}/config.properties">
                                            <entry key="felix.auto.start" value="${bundles} file:modules/${project.build.finalName}.jar"/>
                                            <entry key="org.osgi.framework.bootdelegation" value="*"/>
                                        </propertyfile>
                                        <copy file="${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}" tofile="${project.build.directory}/felix.jar"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>2.3</version>
                        <executions>
                            <execution>
                                <id>create-executable-jar</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <descriptors>
                                        <descriptor>${basedir}/src/main/assembly/felix.xml</descriptor>
                                    </descriptors>
                                    <finalName>${project.build.finalName}</finalName>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>run-on-felix</id>
            <dependencies>
                <dependency>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>org.apache.felix.main</artifactId>
                    <version>4.0.3</version>
                    <scope>provided</scope>
                </dependency>
                <!-- org.apache.felix:org.apache.felix.gogo.shell:0.6.1 useless from Maven since stdin is swallowed -->
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.7</version>
                        <configuration>
                            <target>
                                <property name="vm.args" value=""/>
                                <pathconvert property="plugins.jars" pathsep="${path.separator}">
                                    <path refid="maven.runtime.classpath"/>
                                    <map from="${project.build.directory}${file.separator}classes" to=""/>
                                </pathconvert>
                                <makeurl property="urls" separator=" ">
                                    <path path="${plugins.jars}"/>
                                    <path location="${project.build.directory}/${project.build.finalName}.jar"/>
                                </makeurl>
                                <propertyfile file="${project.build.directory}/run.properties">
                                    <entry key="felix.auto.start" value="${urls}"/>
                                    <entry key="felix.auto.deploy.action" value="uninstall,install,update,start"/>
                                    <entry key="org.osgi.framework.storage" value="${project.build.directory}${file.separator}felix-cache"/>
                                    <entry key="org.osgi.framework.bootdelegation" value="*"/>
                                </propertyfile>
                                <makeurl property="run.properties.url" file="${project.build.directory}/run.properties"/>
                                <java fork="true" jar="${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}">
                                    <sysproperty key="felix.config.properties" value="${run.properties.url}"/>
                                    <jvmarg line="${vm.args}"/>
                                </java>
                            </target>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
