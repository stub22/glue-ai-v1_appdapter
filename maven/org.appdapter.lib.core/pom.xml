<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
<!-- Made using Maven archetype  scala-archetype-simple 1.3    
(using Netbeans 7.0 "New Proj->Maven->From Archetype")

http://implicit.ly/scala-archetype-simple-13-tag-maven-scala

recommends interactive: 

mvn archetype:generate
	-DarchetypeCatalog=http://nexus.scala-tools.org/content/groups/public
	
OR CLI:

mvn archetype:generate -B \
  -DarchetypeRepository=http://scala-tools.org/repo-releases/ \
  -DarchetypeGroupId=org.scala-tools.archetypes -DarchetypeArtifactId=scala-archetype-simple -DarchetypeVersion=1.3 \
  -DgroupId=com.company -DartifactId=project -Dversion=0.1-SNAPSHOT -Dpackage=com.company
  
Note that from Netbeans we can get Cygwin(/Linux/BSD) terminal with menu:  Window->Output->Terminal

Then make sure to set JAVA_HOME, ANT_HOME, SCALA_HOME, M2_HOME,
and then PATH (using bin directory from each) although these 
are often not all completely necessary for simple deployments.
For example, Maven is able to auto-download Scala, or you can 
build Scala + Java (if you install their compilers explicitly) 
without Maven, and finally let's reiterate:  This build+run 
functionality is all WITH or WITHOUT Netbeans 7.0 with Maven 
support + Scala support enabled.  Appdapter itself is a Java+Scala 
library.

We pretend to include some ScalaTest-s and some JUnit-s, watch for 
news on that, or come help out!

Also see optional AppdapterOSGi project to build an OSGi wrapper
bundle, with or without embedded dependencies.

Both plain jar and OSGi forms should be available from Maven 
central repo.   

-->
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.appdapter</groupId>
		<artifactId>org.appdapter.modules.core</artifactId>
		<version>1.2.1</version>
		<relativePath>../org.appdapter.modules.core/pom.xml</relativePath>
	</parent>		
	<artifactId>org.appdapter.lib.core</artifactId>
	<packaging>jar</packaging>
	<name>${project.artifactId} - POJO + Scala</name>

	<description>Appdapter Maven project including Java and Scala, produces jar, not bundle.  Excludes concrete SLF4J binding.</description>

	<dependencies>

		<!-- *************** Compile Deps - mostly OSGi-friendly versions *********************** -->

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.jena_all_2_10_1</artifactId>
            <version>${project.version}</version>
		</dependency>		

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>org.appdapter.bundle.debug</artifactId>
            <version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>org.appdapter.bundle.fileconv</artifactId>
            <version>${project.version}</version>
		</dependency>		

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.xml.dom4j_161</artifactId>
			<version>${project.version}</version>
		</dependency>

        <dependency>
			<!-- Jena-SDB no longer propagates this dep to us.  -->
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
		</dependency>			
		
		<!-- ************************** Test Deps *********************** -->	
		<!--	
		<dependency>
			<groupId>org.scala-tools.testing</groupId>
			<artifactId>specs_2.10</artifactId>
			<version>1.6.9</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scalatest</groupId>
			<artifactId>scalatest_2.10</artifactId>
			<version>1.9.1</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>scala-library</artifactId>
					<groupId>org.scala-lang</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		-->
	 	<dependency>
			<groupId>org.apache.servicemix.bundles</groupId>
			<artifactId>org.apache.servicemix.bundles.junit</artifactId>
			<scope>test</scope>
        </dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<!--	It's OK for lib-core to runtime depend on this binding.
					Users are free to exclude it if they prefer.
					
					Our OSGi users approaching through o.a.b.core also get it at runtime scope.
			-->
			<scope>runtime</scope>
			<exclusions>
				<!-- This embedded Log4J version is not OSGi friendly, so we exclude it.  -->				
				<exclusion>
					<artifactId>log4j</artifactId>
					<groupId>log4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>
	
	<build>
	  <!--
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>
	  -->
		<plugins>
			<plugin>
				<groupId>org.scala-tools</groupId>
				<artifactId>maven-scala-plugin</artifactId>
				<!--version>2.15.2</version-->
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<!-- Not currently using any tests
							<goal>testCompile</goal>
							--> 
						</goals>
						<configuration>
<!--			This works for compiling, but not for displaying the source folders in Netbeans.
				So we are instead using SVN externals to create a tree in Maven-preferred form.
							<sourceDir>../../src_scala</sourceDir>
							<sourceDir>../../src_java</sourceDir>
-->
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--
			 <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>build-helper-maven-plugin</artifactId> 
				<executions> <execution> <id>add-source</id> <phase>generate-sources</phase> 
				<goals> <goal>add-source</goal> </goals> <configuration> <sources> <source>src/main/scala</source> 			
			</sources> </configuration> </execution> </executions> </plugin> 
				-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
		</plugins>

	</build>
</project>
<!--
/*
 *  Copyright 2011 by The Appdapter Project (www.appdapter.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
-->