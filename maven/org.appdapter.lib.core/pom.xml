
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
<!-- Made using Maven archetype  scala-archetype-simple 1.3    
(using Netbeans 7.0 "New Proj->Maven->From Archetype")

http://implicit.ly/scala-archetype-simple-13-tag-maven-scala

recommends interactive: 

mvn archetype:generate
	-DarchetypeCatalog=http://nexus.scala-tools.org/content/groups/public
	
OR CLI:

mvn archetype:generate -B \
  -DarchetypeRepository=http://scala-tools.org/repo-releases/ \
  -DarchetypeGroupId=org.scala-tools.archetypes -DarchetypeArtifactId=scala-archetype-simple -DarchetypeVersion=1.3 \
  -DgroupId=com.company -DartifactId=project -Dversion=0.1-SNAPSHOT -Dpackage=com.company
  
Note that from Netbeans we can get Cygwin(/Linux/BSD) terminal with menu:  Window->Output->Terminal

Then make sure to set JAVA_HOME, ANT_HOME, SCALA_HOME, M2_HOME,
and then PATH (using bin directory from each) although these 
are often not all completely necessary for simple deployments.
For example, Maven is able to auto-download Scala, or you can 
build Scala + Java (if you install their compilers explicitly) 
without Maven, and finally let's reiterate:  This build+run 
functionality is all WITH or WITHOUT Netbeans 7.0 with Maven 
support + Scala support enabled.  Appdapter itself is a Java+Scala 
library.

We pretend to include some ScalaTest-s and some JUnit-s, watch for 
news on that, or come help out!

Also see optional AppdapterOSGi project to build an OSGi wrapper
bundle, with or without embedded dependencies.

Both plain jar and OSGi forms should be available from Maven 
central repo.   

-->
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.appdapter</groupId>
		<artifactId>org.appdapter.modules.core</artifactId>
		<version>1.0.4-SNAPSHOT</version>
		<relativePath>../org.appdapter.modules.core/pom.xml</relativePath>
	</parent>		
	<artifactId>org.appdapter.lib.core</artifactId>
	<packaging>jar</packaging>
	<name>${project.artifactId} - Core classes only, not a bundle</name>
	<url>http://www.appdapter.org</url>
	<description>Appdapter Maven project including Java and Scala, produces jar, not bundle.  Excludes concrete SLF4J binding.</description>


	<repositories>
		<!--
	    <repository>
            <id>maven2-repository.dev.java.net</id>
            <name>Java.net Repository for Maven</name>
            <url>http://download.java.net/maven/2/</url>
        </repository>	
		-->
		<repository>
			<id>scala-tools.org</id>
			<name>Scala-Tools Maven2 Repository</name>
			<url>http://scala-tools.org/repo-releases</url>
		</repository>
		<repository>
			<id>org.apache.respository-SNAPSHOTS</id>
			<name>Apache snapshots repository - used for...</name>
			<url>http://repository.apache.org/snapshots/</url>
			<layout>default</layout>
		</repository>
		<repository>
			<id>com.springsource.repository.bundles.external</id>
			<name>Spring EBR External Release Repository</name>
			<url>http://repository.springsource.com/maven/bundles/external</url>
		</repository>

	
		<!--  Workaround sometimes used for JScience and Javolution  is not so worky these days
		<repository>
	
		
			<id>maven.java.net-SNAP</id>
			<name>maven.java.net SNAPSHOTS Repo</name>
			<url>https://maven.java.net/content/repositories/snapshots/</url>
		</repository>
		-->
	
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>scala-tools.org</id>
			<name>Scala-Tools Maven2 Repository</name>
			<url>http://scala-tools.org/repo-releases</url>
		</pluginRepository>
	</pluginRepositories>

	<dependencies>
		<!--  Was using this for compile-edit workarounds, but now it's gone!
		<dependency>
			<groupId>org.jscience</groupId>
			<artifactId>jscience-mathematics</artifactId>
			<version>5.0-SNAPSHOT</version>
			<scope>provided</scope>
		</dependency>		
		-->
		<!-- *************** Compile Deps - mostly OSGi-friendly versions *********************** -->
		<dependency>
			<groupId>com.weiglewilczek.scala-lang-osgi</groupId>
			<artifactId>scala-library</artifactId>
			<version>2.8.1</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.3.157</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.jena_all_264</artifactId>
			<version>${project.version}</version>
		</dependency>		
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ext.bundle.xml.dom4j_161</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<!--
				Needed at compile time so we can provide a utility to force the properties resource URL in, 
				due to TCCL issues with Log4J's default startup in OSGi environment.	
			-->

			<groupId>org.apache.log4j</groupId>
			<artifactId>com.springsource.org.apache.log4j</artifactId>
			<version>1.2.16</version>
			<scope>provided</scope>			
		</dependency>				

<!--		Problems in Felix, because 
				A) System Bundle #0 supplies the JAXP APIs at version 0.0., 
				B) Dom4J specifies broad "uses" constraints on its exports.
				C) Dom4J specifies version number >1.0 on SOME of its imports.
			
	 [java] javax.xml.parsers; version=0.0.0.1_006_JavaSE imported by:
     [java]    org.apache.servicemix.bundles.dom4j [255]
     [java]    org.apache.servicemix.bundles.xpp3 [283]
     [java]    org.apache.servicemix.bundles.xmlresolver [342]
     [java]    org.apache.servicemix.bundles.xerces [256]
     [java]    com.springsource.org.apache.log4j [273]
     [java]    scala-library [249]
	 
	 

		<dependency>
			<groupId>org.apache.servicemix.bundles</groupId>
			<artifactId>org.apache.servicemix.bundles.dom4j</artifactId>
			<version>1.6.1_4</version>
			<exclusions>
				<exclusion>
					<artifactId>xml-apis</artifactId>
					<groupId>xml-apis</groupId>
				</exclusion>
			</exclusions>
		</dependency>
-->		
		<!-- *************** Runtime Deps *********************** -->


		<!--
		<dependency>
			<groupId>org.apache.servicemix.specs</groupId>
			<artifactId>org.apache.servicemix.specs.jaxp-api-1.4</artifactId>
			<version>1.6.0</version>
			<scope>runtime</scope>
		</dependency>
		-->
		
		
		
		<!-- ************************** Test Deps *********************** -->		
		<dependency>
			<groupId>org.scala-tools.testing</groupId>
			<artifactId>specs_2.8.1</artifactId>
			<version>1.6.8</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>scala-library</artifactId>
					<groupId>org.scala-lang</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<dependency>
			<groupId>org.apache.servicemix.bundles</groupId>
			<artifactId>org.apache.servicemix.bundles.junit</artifactId>
			<version>4.7_3</version>
			<scope>test</scope>
		</dependency>		
		<dependency>
			<groupId>org.scala-tools.testing</groupId>
			<artifactId>specs_${scala.version}</artifactId>
			<version>1.6.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scalatest</groupId>
			<artifactId>scalatest_2.8.1</artifactId>
			<version>1.5.1</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>scala-library</artifactId>
					<groupId>org.scala-lang</groupId>
				</exclusion>
			</exclusions>
		</dependency>
	 <dependency>
	  <groupId>${project.groupId}</groupId>
	  <artifactId>ext.bundle.math.jscience_50SNAP</artifactId>
	  <version>${project.version}</version>
	 </dependency>
	 <dependency>
	  <groupId>org.slf4j</groupId>
	  <artifactId>slf4j-log4j12</artifactId>
	  <version>1.6.2</version>
	  <scope>test</scope>
	 </dependency>
	</dependencies>

	<build>
	  <!--
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>
	  -->
		<plugins>
			<plugin>
				<groupId>org.scala-tools</groupId>
				<artifactId>maven-scala-plugin</artifactId>
				<version>2.15.2</version>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>testCompile</goal>
						</goals>
						<configuration>
							<args>			
								<arg>-make:transitive</arg>
								<arg>-dependencyfile</arg>
								<arg>${project.build.directory}/.scala_dependencies</arg>
							</args>
							<displayCmd>true</displayCmd>
<!--			This works for compiling, but not for displaying the source folders in Netbeans.
				So we are instead using SVN externals to create a tree in Maven-preferred form.
							<sourceDir>../../src_scala</sourceDir>
							<sourceDir>../../src_java</sourceDir>
-->

							<!-- Compile ONLY the Scala code.  The Java code is compiled by a previous goal.
								This works OK as long as we don't refer to Scala classes from Java.
								
								Without this instruction, the Scala compiler is unable to handle our
								Tao/Zen coreferent types.   Don't know why these types are OK if
								Java is compiled before Scala but not if everything is compiled together.
								Will return to this issue later.
							-->
								 
							<sendJavaToScalac>false</sendJavaToScalac>
								
						</configuration>
						
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<!--  FIXME:  If we dont skipTests, then the build "fails" -->
					<skipTests>true</skipTests>
					
					<useFile>false</useFile>
					<disableXmlReport>true</disableXmlReport>
          <!-- If you have classpath issue like NoDefClassError,... -->
          <!-- useManifestOnlyJar>false</useManifestOnlyJar -->
					<includes>
						<include>**/*Test.*</include>
						<include>**/*Suite.*</include>
					</includes>
				</configuration>
			</plugin>


		</plugins>
	</build>
</project>
<!--
/*
 *  Copyright 2011 by The Appdapter Project (www.appdapter.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
-->